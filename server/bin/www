#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { Server } = require("socket.io");
var app = require("../server");
var debug = require("debug")("node-app:server");
var http = require("http");
const { authenticateSocketUser } = require("../middlewares/socket");
const CustomError = require("../utills/CustomError");
const { StatusCodes } = require("http-status-codes");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/* Socket initialization */
const io = new Server(server, {
  cors: { origin: "http://localhost:5173", credentials: true },
});

// global.room = new Map();

const CHAT_BOT = "ChatBot";

let allUsers = [];

/* Socket connections */
io.on("connection", (socket) => {
  socket.on("join-room", async (data) => {
    const { room, username } = data;
    await authenticateSocketUser(socket);
    socket.join(room);

    allUsers.push({ id: socket.id, username, room });

    io.to(room).emit("rcv-msg", {
      id: Date.now(),
      Sender: {
        id: Date.now(),
        fullName: CHAT_BOT,
      },
      content: `${username} has joined the chat!`,
    });

    io.to(room)
      .to(socket.id)
      .emit("room-joined", { users: allUsers, room: room });
  });

  socket.on("send-msg", (data) => {
    io.to(data.room).emit("rcv-msg", data);
  });

  socket.on("leave-room", (data) => {
    const { username, room } = data;
    socket.leave(room);
    allUsers = allUsers.filter((usr) => socket.id !== usr.id);
    socket.to(room).emit("room-leaved", allUsers);
    socket.to(room).emit("rcv-msg", {
      id: Date.now(),
      Sender: {
        id: Date.now(),
        fullName: CHAT_BOT,
      },
      content: `${username} has left the chat!`,
    });
  });

  socket.on("typing", (data) => {
    const { room, username } = data;

    socket.to(room).emit("user-typing", {
      id: Date.now(),
      content: `${username} is typing...`,
      Sender: {
        id: Date.now(),
        fullName: CHAT_BOT,
      },
    });
  });

  socket.on("stop-typing", (data) => {
    socket.to(data.room).emit("user-typing-stopped", {
      id: Date.now(),
      content: "",
      Sender: {
        id: Date.now(),
        fullName: CHAT_BOT,
      },
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`listening on ${port}`);
});
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
